#!/bin/bash
#Copyright 2004-2009 Jason Chu <jason@archlinux.org>
#          2009-2010 Andrea Scarpino <andrea@archlinux.org>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>
declare -a args
[ -f /etc/abs.conf ] && . /etc/abs.conf
[ -f /etc/makepkg.conf ] && . /etc/makepkg.conf
[ -f ~/.makepkg.conf ] && . ~/.makepkg.conf
version(){
	pacman -V
	echo "                       srcpac 0.7"
	echo "                       Copyright 2004 Jason Chu <jason@archlinux.org>"
	echo "                                 2009 Andrea Scarpino <andrea@archlinux.org>"
	exit 0
}
get_pkgname(){
	local tmp=${1##*/}
	tmp=${tmp%-$CARCH*}
	tmp=${tmp%-any*}
	echo -n ${tmp%-*-*}
}
refresh(){
	if [ -n $REFRESH ]; then
		abs
		pacman "-S${REFRESH}"
	fi
}
build_packages(){
	while [ $# -gt 1 ]; do
		candidates=$(find ${ABSROOT} -type d -name ${1})
		if [ -z "${candidates}" ]; then
			echo "Error: Couldn't find ${1} in ${ABSROOT}"
			exit 1
		fi
		success=0
		MKPKGOPTS=$MAKEPKGOPTS
		for pkgdir in ${candidates}; do
			if [ -f ${pkgdir}/PKGBUILD ]; then
				builddir=/var/srcpac${pkgdir/${ABSROOT}//}
				MAKEPKGOPTS="-c -s -r -f"
				[ -d ${builddir} ] && rm -rf ${builddir}
				mkdir -p ${builddir}
				cd ${builddir}
				cp ${pkgdir}/* .
				[ -x "/etc/srcpac.d/${1}" ] && sed -i -f "/etc/srcpac.d/${1}" PKGBUILD
				makepkg --asroot ${MAKEPKGOPTS}
				ret=$?
				if [ $ret -ne 0 ]; then
					echo "Error: Failed to build ${1}"
					exit $ret
				fi
				if [ -n "$2" ]; then
					pacargs="-U"
					[ $NODEPS -eq 1 ] && pacargs="${pacargs}d"
					[ $FORCE -eq 1 ] && pacargs="${pacargs}f"
					[ -z $ROOT ] || pacargs="${pacargs}r $ROOT"
					pacman $pacargs ${builddir}/*${PKGEXT}
					rm -r /var/srcpac
				fi
			fi
		done
		MAKEPKGOPTS=$MKPKGOPTS
		if [ -n "$2" ]; then
			[ -d /etc/srcpac.d ] || mkdir /etc/srcpac.d
			touch /etc/srcpac.d/${packages[@]}
			chmod +x /etc/srcpac.d/${packages[@]}
		fi
		shift
	done
}
MAJOR=0
FORCE=0
ROOT=""
NODEPS=0
BUILD=0
REFRESH=""
SYSUPGRADE=0
DOWNLOAD=0
IGNORE=0
IGNOREPKG=""
NOCONFIRM=0
ARGLIST=$@
ARGSANS=""
while [ $# -ne 0 ]
	do case $1 in
	--version)version;;
	--remove)
		[ $MAJOR = 0 ] || exec pacman -SR
		MAJOR=1
		ARGSANS="$ARGSANS $1";;
	--sync)
		[ $MAJOR = 0 ] || exec pacman -SR
		MAJOR=2
		ARGSANS="$ARGSANS $1";;
	--force)
		FORCE=1
		ARGSANS="$ARGSANS $1";;
	--root)
		ROOT="$2"
		ARGSANS="$ARGSANS $1 $2"
		shift;;
	--nodeps)
		NODEPS=1
		ARGSANS="$ARGSANS $1";;
	--abs)
		BUILD=1
		ARGSANS="$ARGSANS $1";;
	--refresh)
		REFRESH="${REFRESH}y"
		ARGSANS="$ARGSANS $1";;
	--sysupgrade)
		SYSUPGRADE=1
		ARGSANS="$ARGSANS $1";;
	--downloadonly)
		DOWNLOAD=1
		ARGSANS="$ARGSANS $1"
		;;
	--ignore)
		IGNORE=1
		IGNOREPKG="$IGNOREPKG $2"
		ARGSANS="$ARGSANS $1 $2"
		shift;;
	--noconfirm)
		NOCONFIRM=1
		ARGSANS="$ARGSANS $1";;
	--*)ARGSANS="$ARGSANS $1";;
	-*)
		ARGSANS="$ARGSANS $1"
		[ $(echo -n $1 |grep r) ] && OPTIONAL=$2
		OPTIND=1
		while getopts ":VRUFSdfayur:eow" opt $1 $OPTIONAL
			do case $opt in
			V)version;;
			R)
				[ $MAJOR = 0 ] || exec pacman -SR
				MAJOR=1;;
			S)
				[ $MAJOR = 0 ] || exec pacman -SR
				MAJOR=2;;
			f)FORCE=1;;
			r)ROOT="${OPTARG}";;
			d)NODEPS=1;;
			a)BUILD=1;;
			y)REFRESH="${REFRESH}y";;
			u)SYSUPGRADE=1;;
			w)DOWNLOAD=1;;
			esac
		done;;
	*)args[${#args[@]}]="$1";;
	esac
	shift
done
if [ ${UID} -ne 0 ]; then
	echo "Error: Must be root"
	exit 1
fi
if [ -z "${ABSROOT}" ]; then
	echo "Error: ABSROOT undefined"
	exit 1
fi
case $MAJOR in
0)exec pacman $ARGLIST;;
1)
	(if [ -d /etc/srcpac.d ]; then
		for pkg in $(find /etc/srcpac.d -type f |sed s,.*/,,)
		do [ -z "$(pacman -Q $pkg)" ] && chmod -x /etc/srcpac.d/${pkg}
		done
	fi)2>/dev/null&
	exec pacman $ARGLIST;;
2)
	if [ $BUILD -eq 1 ]; then
		refresh
		if [ $DOWNLOAD -eq 1 ]; then
			build_packages ${args[@]}
			exit 0
		fi
		if [ $SYSUPGRADE -eq 1 ]
		then output=$(pacman -Spu --noconfirm)
		else output=$(pacman -Sp ${args[*]} --noconfirm)
		fi
		ret=$?
		if [ $ret -ne 0 ]; then
			echo -n $output
			exit $ret
		fi
		declare -a packages
		for line in ${args[*]}
		do [ -x /etc/srcpac.d/$line ] || packages[${#packages[@]}]=$line
		done
		for line in $output; do
			if [ $( echo -n "${line}" |grep -F '://' ) ]; then
				line=$(get_pkgname ${line})
				[ -x /etc/srcpac.d/$line ] && packages[${#packages[@]}]=$line
			fi
		done
		[ ${#packages[@]} -eq 0 ] && exit 0
		[ -d /etc/srcpac.d ] || mkdir /etc/srcpac.d
		for pkg in ${packages[@]}; do
			touch /etc/srcpac.d/${packages[@]}
			chmod +x /etc/srcpac.d/${packages[@]}
		done
		echo "Source Targets: ${packages[*]}"
		if [ ${NOCONFIRM} -eq 0 ]; then
			read -p "Proceed? [Y/n] " -n 1
			[ "${REPLY}" != "y" -a "${REPLY}" != "Y" -a "${REPLY}" != "" ] && exit 0
		fi
		build_packages ${packages[@]} install
	elif [ $SYSUPGRADE -eq 1 -a -d /etc/srcpac.d ]; then
		refresh
		[ $IGNORE -eq 1 ] && ignorestr="--ignore $IGNOREPKG"
		output=$(pacman -Spu --noconfirm ${ignorestr})
		ret=$?
		if [ $ret -ne 0 ]; then
			echo -n $output
			exit $ret
		fi
		declare -a packages
		for line in $output
		do [ $( echo -n "${line}" |grep -F '://' ) ] && packages[${#packages[@]}]=$(get_pkgname ${line})
		done
		[ ${#packages[@]} -eq 0 ] && exit 0
		declare -a sourcepac
		declare -a regpac
		for pkg in ${packages[@]}; do
			if [ -f /etc/srcpac.d/${pkg} ]
			then sourcepac[${#sourcepac[@]}]=$pkg
			else regpac[${#regpac[@]}]=$pkg
			fi
		done
		pacargs="-S"
		[ $NODEPS -eq 1 ] && pacargs="${pacargs}d"
		[ $FORCE -eq 1 ] && pacargs="${pacargs}f"
		[ -z $ROOT ] || pacargs="${pacargs}r $ROOT"
		pacman $pacargs ${regpac[*]} $ignorestr
		[ ${#sourcepac[@]} -eq 0 ] && exit 0
		echo "Source Targets: ${sourcepac[*]}"
		if [ ${NOCONFIRM} -eq 0 ]; then
			read -p "Proceed? [Y/n] " -n 1
			[ "${REPLY}" != "y" -a "${REPLY}" != "Y" -a -n "${REPLY}" ] && exit 0
		fi
		build_packages ${sourcepac[@]} install
	else
		[ -z $REFRESH ] || abs
		exec pacman $ARGLIST
	fi;;
esac